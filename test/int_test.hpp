#include <sstream>
#include <string>
#include <vector>
#include <UnitTest++.h>
#include <cassert>
#include "../src/Int.hpp"
#include "../src/common.hpp"

using std::cout;
using std::endl;

namespace IntTest {

bool runLessThan(const Int& x, const Int& y, bool expected) {
    bool lt = (x < y);
    bool result = (lt == expected); 
    if (!result) {
        cout << "FAILED: " << x << " < " << y << " = " 
             << lt << " : " << expected << endl;
    }
    return result;
}

bool runAddition(const Int& x, const Int& y, const Int& expected) {
    const Int& sum1 = x + y;
    bool result1 = (sum1 == expected);
    if (!result1) {
        cout << "FAILED: " << x << " + " << y << " = " 
             << sum1 << " : " << expected << endl;
        return false;
    }

    Int sum2(x);
    sum2 += y;
    bool result2 = (sum2 == expected);
    if (!result2) {
        cout << "FAILED: " << x << " += " << y << " --> " 
             << sum2 << " : " << expected << endl;
        return false;
    }
    return true;
}

bool runSubtraction(const Int& x, const Int& y, const Int& expected) {
    const Int& diff1 = x - y;
    bool result1 = (diff1 == expected);
    if (!result1) {
        cout << "FAILED: " << x << " - " << y << " = "
             << diff1 << " : " << expected << endl;
        return false;
    }

    Int diff2(x);
    diff2 -= y;
    bool result2 = (diff2 == expected);
    if (!result2) {
        cout << "FAILED: " << x << " -= " << y << " --> " 
             << diff2 << " : " << expected << endl;
        return false;
    }
    return true;
}

bool runMultiplication(const Int& x, const Int& y, const Int& expected) {
    const Int& prod1 = x * y;
    bool result1 = (prod1 == expected);
    if (!result1) {
        cout << "FAILED: " << x << " * " << y << " = "
             << prod1 << " : " << expected << endl;
        return false;
    }

    Int prod2(x);
    prod2 *= y;
    bool result2 = (prod2 == expected);
    if (!result2) {
        cout << "FAILED: " << x << " *= " << y << " --> "
             << prod2 << " : " << expected << endl;
        return false;
    }
    return true;
}

bool runDivideByInt(const Int& x, int32_t y, const Int& expected) {
    Int actual;
    divide_by_int(x, y, actual);
    bool result = (actual == expected);
    if (!result)
        cout << "FAILED: " << x << " div_int " << y << " = "
             << actual << " : " << expected << endl;
    return result;
}

bool runDivision(const Int& x, const Int& y, const Int& expected) {
    const Int& quotient1 = x / y;
    bool result1 = (quotient1 == expected);
    if (!result1) {
        cout << "FAILED: " << x << " / " << y << " = "
             << quotient1 << " : " << expected << endl;
        return false;
    }

    Int quotient2(x);
    quotient2 /= y;
    bool result2 = (quotient2 == expected);
    if (!result2) {
        cout << "FAILED: " << x << " /= " << y << " --> " 
             << quotient2 << " : " << expected << endl;
        return false;
    }
    return true;
}

bool runModulus(const Int& x, const Int& y, const Int& expected) {
    const Int& m1 = x % y;
    bool result1 = (m1 == expected);
    if (!result1) {
        cout << "FAILED: " << x << " % " << y << " = " 
             << m1 << " : " << expected << endl;
        return false;
    }

    Int m2(x);
    m2 %= y;
    bool result2 = (m2 == expected);
    if (!result2) {
        cout << "FAILED: " << x << " %= " << y << " --> " 
             << m2 << " : " << expected << endl;
        return false;
    }
    return true;
}

bool runExponentiation(const Int& x, const Int& y, const Int& expected) {
    const Int& exp1 = x ^ y;
    bool result1 = (exp1 == expected);
    if (!result1) {
        cout << "FAILED: " << x << " ^ " << y << " = "
             << exp1 << " : " << expected << endl;
        return false;
    }

    Int exp2(x);
    exp2 ^= y;
    bool result2 = (exp2 == expected);
    if (!result2) {
        cout << "FAILED: " << x << " ^= " << y << " --> " 
             << exp2 << " : " << expected << endl;
        return false;
    }
    return true;
}

bool runTimesPowerTen(const Int& x, int32_t power, const Int& expected) {
    Int copy(x);
    copy.times_power_ten(power);
    bool result = (copy == expected);
    if (!result)
        cout << "FAILED: " << x << " times_power_ten(" << power << ") = "
             << copy << " : " << expected << endl;
    return result;
}

bool runQuotientAndRemainder(const Int& y, const Int& x, int32_t q_expect, const Int& r_expect) {
    int32_t q;
    Int r;
    quotient_and_remainder(y, x, q, r);
    bool result = (q == q_expect && r == r_expect);
    if (!result) {
        cout << "FAILED: q_and_r(" << y << ", " << x
             << ") --> (q=" << q << ", r=" << r << ") : "
             << "(" << q_expect << ", " << r_expect << ")"
             << std::endl;
    }
    return result;
}

TEST(quotientAndRemainder) {
    // arg0/arg1 == arg2 REMAINDER arg3
    // OR arg0 == arg1 * arg2 + arg3
    for (int32_t i = 1; i < 10; ++i) {
        CHECK(runQuotientAndRemainder(Int(i), Int(1), i, Int(0)));
    }
    CHECK(runQuotientAndRemainder(Int(8), Int(5), 1, Int(3)));
    CHECK(runQuotientAndRemainder(Int("3792716099701581623022653685858767827149721399596866233228853193543187507585601243997890028487021230001261845"),
                                  Int("3819478642823010818696972939434699323016791829155104071532167070622505736629553434354326421340630305"),
                                  992993142,
                                  Int("1362864360264754180840530042562004362404212235901133860016809640256796489161496694066372891178893535")));
    CHECK(runQuotientAndRemainder(Int("2568686827233851938444978246779850290982230995594347904736017078756406219656903161543146215349718383475994213"),
                                  Int("4776042213900538941787814459372526950743081645110831072862482128756549348356502553314866758288238962"),
                                  537827496,
                                  Int("2541428686332748232782930389871564055080828986339394763102521690029893677976204927165917576293895061")));
    CHECK(runQuotientAndRemainder(Int("1173666082498524514831814884031043970018836787831363195418178241647758522122026343712859498235053150251348021"),
                                  Int("3038782747393111516906750532149692360491507502455519405656062126181646300036751249018284403876332395"),
                                  386229019,
                                  Int("3018758246299318711521140328474407487326827844236174315249567055853852244857502799862897492012577516")));
    CHECK(runQuotientAndRemainder(Int("2434226020623350141731174379746604923467331557563081529011352989465617287675634579611783383997596448951895638"),
                                  Int("5484840551507269485208694881897135509777528684447479118479622797415055124188700211255995875448613792"),
                                  443809805,
                                  Int("5002816415418253119907339182814390958736539288697339699271287168945196755650801049433942874404065078")));
    CHECK(runQuotientAndRemainder(Int("1584881892517494882879094133117350620579966872648274055995703245654676567599475251647781839113702865728683102"),
                                  Int("3305288852060938065031791044557452436852489563771306034390155559107168724981149948052188064119167022"),
                                  479498755,
                                  Int("3038895896564241291831902651137482008169439707781636470806460252396076453088442987342702107042625492")));
    CHECK(runQuotientAndRemainder(Int("2394774660447748735920381847420099681100336989974449785044525316807011659097841328033831167178593541515896381"),
                                  Int("5732719557783628441453975810032924744702275705163956880481522532683188874546343112666477521724801881"),
                                  417737975,
                                  Int("1136320302634991936837961014921016359007561394804857069087065022102322912493339996870256296470765406")));
    CHECK(runQuotientAndRemainder(Int("7032543910658316172597334773051602065582225829531641628345787809568391659398472794971516030902010004228591057"),
                                  Int("8022453411399262949518900453516730360645381858845284354253688316014379190294545030487852634381270311"),
                                  876607634,
                                  Int("6816379649075710008212774084720910925222754938506244259093582407415535912689101667336377582988436883")));
    CHECK(runQuotientAndRemainder(Int("2273975059668948015330329772165790384261069027262990865482410900679189788955522583426425085584180776709928291"),
                                  Int("4155747943372654456169690258863579516923636787805272840468532880220074910529585503188839427957574721"),
                                  547187916,
                                  Int("3113579212070723617052727780095337482202889406095033930374089377298952235592712684541443328711656855")));
    CHECK(runQuotientAndRemainder(Int("675898052084638692296410570663463160074220992724337527320971134522767720771007996774166857720430818750386415"),
                                  Int("9584891031592281589580708872157158280253486619263587223061646087299183400176374143763624339887244927"),
                                  70517030,
                                  Int("3663114823675500035704290664910837469189128569204716345535308585965268615987163047235871771615779605")));
    CHECK(runQuotientAndRemainder(Int("2753361386165125629846383350416262040029675041666320206507275556985479911234210811760866860639283947180766740"),
                                  Int("3981084586998815818602843210870892618288621897978664335801089555555690315504991817793876321320435980"),
                                  691610872,
                                  Int("3445114758575077135666564116876718103127001127828583190917516487565848300303578941790705027632792180")));
}

TEST(printInt) {
    std::string x("123456789123456789123456789123456789");
    for (size_t i = 0; i < x.size(); ++i) {
        const std::string& y = x.substr(0, i + 1);
        CHECK(testOutput(Int(y), y));
        CHECK(testOutput(Int("-" + y), "-" + y));
    }

    // check zero is parsed properly
    x = "000000000000000000000";
    for (size_t i = 0; i < x.size(); ++i) {
        const std::string& y = x.substr(0, i + 1);
        CHECK(testOutput(Int(y), "0"));
        CHECK(testOutput(Int("-" + y), "0"));
    }
    
    // check leading zeroes are properly ignored
    x = "000000000123456789123456789";
    for (size_t i = 0; i < x.size()-10; ++i) {
        const std::string& y = x.substr(0, i + 10);
        const std::string& z = x.substr(9, i + 1);
        CHECK(testOutput(Int(y), z));
        CHECK(testOutput(Int("-" + y), "-" + z));
    }
    for (int i = 0; i < 9; ++i) {
        const std::string& y = x.substr(i);
        const std::string& z = x.substr(9);
        CHECK(testOutput(Int(y), z));
    }

    // check that exceptions are thrown 
    CHECK_THROW(Int("abcdefghij"), std::invalid_argument);
    CHECK_THROW(Int("1234567a9"), std::invalid_argument);
    CHECK_THROW(Int(""), std::invalid_argument);

    // check other constructors
    CHECK(testOutput(Int(9999, 2), "9999000000000000000000"));

    assert(sizeof(int64_t) == 8);
    int64_t k = 1234567891234567;
    CHECK(testOutput(Int(k), "1234567891234567"));
    CHECK(testOutput(Int(k, 2), "1234567891234567000000000000000000"));

    // check things with many bins
    CHECK(testOutput(Int("152415787806666675432666675280250887626"), "152415787806666675432666675280250887626"));


}

TEST(lessThan) {
    CHECK(runLessThan(Int( 1), Int( 2), true));
    CHECK(runLessThan(Int(-1), Int( 2), true));
    CHECK(runLessThan(Int(-2), Int( 1), true));
    CHECK(runLessThan(Int(-2), Int(-1), true));
    CHECK(runLessThan(Int( 2), Int( 1), false));
    CHECK(runLessThan(Int( 2), Int(-1), false));
    CHECK(runLessThan(Int( 1), Int(-2), false));
    CHECK(runLessThan(Int(-1), Int(-2), false));

    CHECK(runLessThan(Int(-1), Int(-1), false));
    CHECK(runLessThan(Int(1), Int(1), false));

    CHECK(runLessThan(Int(0), Int(0), false));
    CHECK(runLessThan(Int(0), Int(1), true));
    CHECK(runLessThan(Int(0), Int(-1), false));

    CHECK(runLessThan(Int("123456787123456788"),
                       Int("123456788123456787"), 
                       true));
    CHECK(runLessThan(Int("123456787123456788"),
                       Int("123456780123456788000000000"), 
                       true));
}

TEST(booleanOperators) {
    for (int32_t i = -9; i < 9; ++i) {
        for (int32_t j = -9; j < 9; ++j) {
            Int a(i);
            Int b(j);
            CHECK((a < b) == (i < j));
            CHECK((a <= b) == (i <= j));
            CHECK((a > b) == (i > j));
            CHECK((a >= b) == (i >= j));
            CHECK((a == b) == (i == j));
            CHECK((a != b) == (i != j));
        }
    }
}

TEST(negation) {
    Int x(3);
    Int y(-3);
    Int zero(0);
    CHECK(-x == y);
    CHECK(-y == x);
    CHECK(-y > zero);
    CHECK(-x < zero);
}

TEST(addition) {
    for (int i = -30; i < 30; ++i)
        for (int j = -50; j < 50; j += 7)
            CHECK(runAddition(Int(i), Int(j), Int(i + j)));
    CHECK(runAddition(Int("99999999999999"),
                      Int("1"),
                      Int("100000000000000")));
    CHECK(runAddition(Int("123456789012345678"),
                      Int("9876543210"),
                      Int("123456798888888888")));
    CHECK(runAddition(Int("123456789012345678"),
                      Int("987654"),
                      Int("123456789013333332")));
    CHECK(runAddition(Int("999999999"),
                      Int("999999999"),
                      Int("1999999998")));
    CHECK(runAddition(Int("999999999999999999"),
                      Int("999999999999999999"),
                      Int("1999999999999999998")));
    CHECK(runAddition(Int("-2716445957404848627014573524176771721308664459798"),
                      Int("2889775078566148412145506450396389475524859430893521163943265493257180008178077570438898156274360372"),
                      Int("2889775078566148412145506450396389475524859430893518447497308088408552993604553393667176847609900574")));
    CHECK(runAddition(Int("-86906712824216289018918588401690550826708787665745"),
                      Int("81651974833641144128235338321239954906776586822634"),
                      Int("-5254737990575144890683250080450595919932200843111")));
    CHECK(runAddition(Int("-1478626419760253906972936775612839506073530059400306160504493577775047071195993794888581370877455669"),
                      Int("4289775857305409280291666567702564152365335072937844888891956728908779527579392915561687904989248828"),
                      Int("2811149437545155373318729792089724646291805013537538728387463151133732456383399120673106534111793159")));
    CHECK(runAddition(Int("-95026144179053472601487380010185649004640846400783"),
                      Int("427042017658047259432441464514524316691239746362418820510107001511232920742678894041405285332390776"),
                      Int("427042017658047259432441464514524316691239746362323794365927948038631433362668708392400644485989993")));
    CHECK(runAddition(Int("88877488136873276265959459385192172082567581384920"),
                      Int("53473915894116984869658972651605463505852458046477"),
                      Int("142351404030990261135618432036797635588420039431397")));
    CHECK(runAddition(Int("-9915946854630268696754570520539398072330697944936040256489159828917325295208565497219532229530898840"),
                      Int("9251724247832551823772704870654445992358729226921577055908687878788262552537956005003551332743094101"),
                      Int("-664222606797716872981865649884952079971968718014463200580471950129062742670609492215980896787804739")));
    CHECK(runAddition(Int("-5652538598528543225956624599770839555083294435343172954013403698998985205932641431738263065670742783"),
                      Int("-58103578982642650972699215861418987987385815202872"),
                      Int("-5652538598528543225956624599770839555083294435343231057592386341649957905148502850726250451485945655")));
    CHECK(runAddition(Int("-5409177211171790523964753155254824933152086020450376357548090948332953346894875759309578632749523445"),
                      Int("9174023174079501159183620958822175121037541710445316737584416701876563322843763958631673268540601202"),
                      Int("3764845962907710635218867803567350187885455689994940380036325753543609975948888199322094635791077757")));
    CHECK(runAddition(Int("4828216429207487699023761588516797042404475800642981921612866912137037458365868011900987829457708453"),
                      Int("7806181582447528045237860620095797952531561155532197184521410632993582129369020183107355676178410826"),
                      Int("12634398011655015744261622208612594994936036956175179106134277545130619587734888195008343505636119279")));
    CHECK(runAddition(Int("-5665877987781677917156109131480274509324375716716195568625116774369171883520354844200291151712183676"),
                      Int("9012822906707832376725512230945574712946506879037292417203923485767430890287497110758919054417881069"),
                      Int("3346944918926154459569403099465300203622131162321096848578806711398259006767142266558627902705697393")));
    CHECK(runAddition(Int("33402297587685462400228430727982690256806802341642"),
                      Int("-63683986271305618566532685025210797361203160503471"),
                      Int("-30281688683620156166304254297228107104396358161829")));
    CHECK(runAddition(Int("15304630214106738460856504216119862632695289014352"),
                      Int("-4495616832734207625888587014356461053602055547791259132836557564888062618556853396602340567101959330"),
                      Int("-4495616832734207625888587014356461053602055547791243828206343458149601762052637276739707871812944978")));
    CHECK(runAddition(Int("-32799646363699242075180632615288997780745959015786"),
                      Int("46973895631228249036256133444473466158018556753770"),
                      Int("14174249267529006961075500829184468377272597737984")));
    CHECK(runAddition(Int("-5282565021484882741931252666073798594677290131307456006092142476662990725881468130079468486353628868"),
                      Int("-3920232150379683604579824858814596588520825914708291185289492401814424828248398745223596526064255501"),
                      Int("-9202797171864566346511077524888395183198116046015747191381634878477415554129866875303065012417884369")));
    CHECK(runAddition(Int("16717384589292288707461568174528287012648452073063"),
                      Int("-3269178112756550351857100735826408653390797095781981876036793338804968231289303258916269507911150243"),
                      Int("-3269178112756550351857100735826408653390797095781965158652204046516260769721128730629256859459077180")));
    CHECK(runAddition(Int("4034791699890824086241656872793674265769438199687800948201644929696356735661367601005530906626176237"),
                      Int("-80069885472182156251480236274166790483288710152038"),
                      Int("4034791699890824086241656872793674265769438199687720878316172747540105255425093434215047617916024199")));
    CHECK(runAddition(Int("1410519716896017477769398904307083342959701194135870693537561098907915704965880522250460571991137057"),
                      Int("88715805892008080593947031462116066934649280771231"),
                      Int("1410519716896017477769398904307083342959701194135959409343453106988509651997342638317395221271908288")));
    CHECK(runAddition(Int("17916622657191240673331374413498516318991769150207"),
                      Int("10182691212795931346547033437153048197638179730518"),
                      Int("28099313869987172019878407850651564516629948880725")));
    CHECK(runAddition(Int("-73611411899777243086928085935385758603344206299733"),
                      Int("-63533210710700226165133335008297664455245291455988"),
                      Int("-137144622610477469252061420943683423058589497755721")));
    CHECK(runAddition(Int("-7239432531375495230529592193883455584664275752968919967622476590901496716409640957575500485199005412"),
                      Int("-2915799589684667133882399461290245204439219149741622383890159653516498362637201579960504389347097499"),
                      Int("-10155232121060162364411991655173700789103494902710542351512636244417995079046842537536004874546102911")));
    // check += is safe to use on a single instance
    Int x("111111111222222222");
    x += x;
    CHECK(testOutput(x, "222222222444444444"));
    x = Int("-111111111222222222");
    x += x;
    CHECK(testOutput(x, "-222222222444444444"));
}

TEST(subtraction) {
    for (int i = -30; i < 30; ++i)
        for (int j = -50; j < 50; j += 5)
            CHECK(runSubtraction(Int(i), Int(j), Int(i - j)));
    CHECK(runSubtraction(Int("1000000000000"),
                         Int("1"),
                         Int("999999999999")));
    CHECK(runSubtraction(Int("123456798888888888"),
                         Int("9876543210"),
                         Int("123456789012345678")));
    CHECK(runSubtraction(Int("123456789013333332"),
                         Int("987654"),
                         Int("123456789012345678")));
    CHECK(runSubtraction(Int("1"),
                         Int("999999999999999999"),
                         Int("-999999999999999998")));
    CHECK(runSubtraction(Int("1000000001"),
                         Int("999999999999999999"),
                         Int("-999999998999999998")));

    CHECK(runSubtraction(Int("6701137507629515770252971172961463776928187343422312382072270990511974194439213877582276229847567004"),
                         Int("62464770588706763485243836851487878215710567832980"),
                         Int("6701137507629515770252971172961463776928187343422249917301682283748488950602362389704060519279734024")));
    CHECK(runSubtraction(Int("-6816018101871904759239233051382612019023365582546696556177410752306190475675537065228166893870735183"),
                         Int("7518240787342354806557716540556916694123717824714088944481346463032101051274171065768259608461849105"),
                         Int("-14334258889214259565796949591939528713147083407260785500658757215338291526949708130996426502332584288")));
    CHECK(runSubtraction(Int("-40290914846948701339920490694779032708465316623063"),
                         Int("14951209254691579473231398753967850817453825525925"),
                         Int("-55242124101640280813151889448746883525919142148988")));
    CHECK(runSubtraction(Int("-85242008607800669726525238951119281334757925920304"),
                         Int("-1406058621207740553293568543763010440410983205113207632837412769001583328430269225889404988850514996"),
                         Int("1406058621207740553293568543763010440410983205113122390828804968331856803191318106608070230924594692")));
    CHECK(runSubtraction(Int("-2359952405463979035512519900718147430579771218762982729453930822291247264402596362835722118762965210"),
                         Int("6352932504009721555210229068233729773017923544196894470832367949906021771241946599003999669214538560"),
                         Int("-8712884909473700590722748968951877203597694762959877200286298772197269035644542961839721787977503770")));
    CHECK(runSubtraction(Int("-9898449120483569745371958934734262809378213989801246519644744330706292372047899684220902491840569369"),
                         Int("54806625278549736227610847411011951841758538071559"),
                         Int("-9898449120483569745371958934734262809378213989801301326270022880442519982895310696172744250378640928")));
    CHECK(runSubtraction(Int("-96507085252845717368340920233228516510449517935772"),
                         Int("-1743765607581785546859398272514459610085219449496881772220808023995111937903919679283052008797505694"),
                         Int("1743765607581785546859398272514459610085219449496785265135555178277743596983686450766541559279569922")));
    CHECK(runSubtraction(Int("6420732068813480650847878277341581946749757465588203578887179532102080210737600383929532085160821491"),
                         Int("56327481642839954876509006954456747248320439964892"),
                         Int("6420732068813480650847878277341581946749757465588147251405536692147203701730645927182283764720856599")));
    CHECK(runSubtraction(Int("8631155034828001852237506572135983297603853943212985087905105217012050768131974355129906279587127799"),
                         Int("8359379798242555676514199738036458273058030986897633773919609929692363012467597504745110327278414429"),
                         Int("271775236585446175723306834099525024545822956315351313985495287319687755664376850384795952308713370")));
    CHECK(runSubtraction(Int("-83942249244194282059202285669930860063660194721395"),
                         Int("-1207031674164419788147043371752317109064286261012491158117265546386183731066391666008045064222160510"),
                         Int("1207031674164419788147043371752317109064286261012407215868021352104124528780721735147981404027439115")));
    CHECK(runSubtraction(Int("-2198284715340141314589224672394893827986287583726955854255419611044469765493321870996625538793281780"),
                         Int("5370863493423960410764380626866715267065606459524445874009053284124898116805048901393090525575216329"),
                         Int("-7569148208764101725353605299261609095051894043251401728264472895169367882298370772389716064368498109")));
    CHECK(runSubtraction(Int("23877120981688451049423375807126264296660312003313"),
                         Int("-5189607782932458640222094067899749786638761347949657260390709131665625036307561160191295413605948793"),
                         Int("5189607782932458640222094067899749786638761347949681137511690820116674459683368286455592073917952106")));
    CHECK(runSubtraction(Int("98833012204962918544089693571643202929833999585373"),
                         Int("-1231353508438427041969628579332643613737396167963047029287388565745108711608373885760391513940773068"),
                         Int("1231353508438427041969628579332643613737396167963145862299593528663652801301945528963321347940358441")));
    CHECK(runSubtraction(Int("-53291326317838861357202864399431708257663875299249"),
                         Int("4777929605537478395761345664148977477727019856540237469463875202895465492959396175452662740985984476"),
                         Int("-4777929605537478395761345664148977477727019856540290760790193041756822695823795607160920404861283725")));
    CHECK(runSubtraction(Int("-77835266008695160401745374651728837893686521326346"),
                         Int("-2860049448317523025186639817944684149281628448598648949974412292342426062394163083571390310119988777"),
                         Int("2860049448317523025186639817944684149281628448598571114708403597182024317019511354733496623598662431")));
    CHECK(runSubtraction(Int("53937900453470999234192402282344627280748945317689"),
                         Int("-6277909511410052421281692856437143679067382415681224614974056205370013466216487158912301215336496934"),
                         Int("6277909511410052421281692856437143679067382415681278552874509676369247658618769503539581964281814623")));
    CHECK(runSubtraction(Int("9329327794745625046133253723273997858717279458407288396199619374094971206370795947458218697666611197"),
                         Int("247000715973715233900529817051122381597823206414508555399077291141411711978464227487839241983704935"),
                         Int("9082327078771909812232723906222875477119456251992779840800542082953559494392331719970379455682906262")));
    CHECK(runSubtraction(Int("-62891138802112452379589543036811031091434983064338"),
                         Int("-35567346650080776988287604881597980859832508966315"),
                         Int("-27323792152031675391301938155213050231602474098023")));
    CHECK(runSubtraction(Int("-518675274293581095049501996504814805979308012757685558499774116871062260464018388327900903991352069"),
                         Int("-73711246676747373179491126959323430084973925186830"),
                         Int("-518675274293581095049501996504814805979308012757611847253097369497882769337059064897815930066165239")));
    CHECK(runSubtraction(Int("92677408320670666720451450664287501747311899736654"),
                         Int("20464534484584268937177705338882244397131824654114"),
                         Int("72212873836086397783273745325405257350180075082540")));

    // check -= is safe to use on a single instance
    Int x("111111111222222222");
    x -= x;
    CHECK(testOutput(x, "0"));
    x = Int("-111111111222222222");
    x -= x;
    CHECK(testOutput(x, "0"));
}

TEST(multiplication) {
    for (int i = -50; i < 50; ++i)
        for (int j = -100; j < 100; j += 7)
            CHECK(runMultiplication(Int(i), Int(j), Int(i * j)));

    // check *= is safe to use with a single instance
    Int x("111111111222222222");
    x *= x;
    CHECK(testOutput(x, "12345679037037036999999999950617284"));
    x = Int("-111111111222222222");
    x *= x;
    CHECK(testOutput(x, "12345679037037036999999999950617284"));

    CHECK(runMultiplication(Int("999999999"),
                             Int("999999999"), 
                             Int("999999998000000001")));
    CHECK(runMultiplication(Int("9999999999"),
                             Int("9999999999"),
                             Int("99999999980000000001")));
    CHECK(runMultiplication(Int("1234567891234"),
                             Int("123456789123456789123456789"),
                             Int("152415787806666675432666675280250887626")));
    CHECK(runMultiplication(Int("-6748026482029075873672289018172034286487754007295373555942823809223378318669649445771709663922682191"),
                            Int("-3247082882623477475392736773030628880462288543243367048406636011598262794396349940993155431932373276"),
                            Int("21911401281286535410579303395840943444564235494379233339148177085913046923343661944756639650887590330369243374048729049969610310665672384133439229687949186967626628254583359447668409551079526129527716")));
    CHECK(runMultiplication(Int("-4168044205268599679718983130392587215831710525406631328511489822318184520809135733405157614406383030"),
                            Int("7452887814719475624529661982916715026372747276142441604934842455852104495629448118607791405200937808"),
                            Int("-31063965868658467357474776717793591931469125926264202393212457417174826394077271967917386275131946395698477527849191507878031288912909301152661045410081778115882398829131636772046069705184977256598240")));
    CHECK(runMultiplication(Int("-4978976834636844505400123455086419518183822791540550932963733074668991559901958258828079986366984899"),
                            Int("-4091200615511284256506510817938171642299006241328264082862668384940290813275865580455792520035001013"),
                            Int("20369993090482684011212795602663791396635802382312070666087606679748404611634588735992614792424310892228756512960651342909713551987922394479152243755578406411636620776034812504349104285026141220702687")));
    CHECK(runMultiplication(Int("-58702535166388576077309330998160638157287352271123"),
                            Int("6111165625283506968241491076716599716491756959757695621536949912144807783975770950317188831355539665"),
                            Int("-358740915025830099289462465224546768492873482661192888313700122544551799853420608249277731172085068879861961837892075310671465581440861962425060593795")));
    CHECK(runMultiplication(Int("-94636047446758064783798734937700229851498175077382"),
                            Int("-2043362865555426518133307519387626977875487139973"),
                            Int("193375785095646864541729907646735579619205141532517015222012853435073510528233181541939995140390686")));
    CHECK(runMultiplication(Int("59199599010489886559836922121832154809279777768626"),
                            Int("29295909140626098324762876172260951998449275672543"),
                            Int("1734306073772810393312991383585020606449537772893319831515016955340780227464693000469197025995035918")));
    CHECK(runMultiplication(Int("4012961337112004728697827577722646654442826712338308704659277920697051157997525580353477271131569481"),
                            Int("-81299466741859205309822932815698368634885500231864"),
                            Int("-326251616762904275121564532156983454669443235295579187023058299646645874412416300146437245831702359753466908822187789095698896114387717723075726142584")));
    CHECK(runMultiplication(Int("-29735846897307588427703579031640210220090791968728"),
                            Int("-4278689315979348350711880656070947367013375041917"),
                            Int("127230450421107633489932133957168179533756151000529461491977157865098662397650404077303463953171576")));
    CHECK(runMultiplication(Int("-41115946217668498304625642304422242215782643749092"),
                            Int("7698605004047200674355082276101389009946237265978638783549284321009939426352002572780989875514584372"),
                            Int("-316535429297478274649377733787117379757296714224456888602427262509683356651004651700370429791502063773879389249517221829473668966837292665626232390224")));
    CHECK(runMultiplication(Int("13704284682732519966659408132300492766866252487320"),
                            Int("-3301149581488986805421358951956087523731825667553972224335640405003749438351872222247464796859880709"),
                            Int("-45239893645008390610606075764971292802806581697221008309718515201610641230183691251449546792715697922513776555393939045261261477521461283689735109880")));
    CHECK(runMultiplication(Int("-98432901101343153221079428914698847366076907950749"),
                            Int("-3394222074291307656832264183997482494958907431539415508477039900516046009240908812809100623544366802"),
                            Int("334103125754712099486786270259680444414051189802859120727501521928281965654048234224887808331401597566349479767797365973344973722810078883824606634698")));
    CHECK(runMultiplication(Int("-65132791193095412092584727864180297664969971906618"),
                            Int("-25169793390063278362742637546884938705457041094837"),
                            Int("1639378897248344613314822311071137144762972189366059143612621375834519447362719344432619823045931266")));
    CHECK(runMultiplication(Int("-61548057246232986828935675747054426092512333917511"),
                            Int("-96991800024194623435584886252734862398542716776735"),
                            Int("5969656860304312680179192076090426926975734703566390678644280077486018360805514442433321585293906585")));
    CHECK(runMultiplication(Int("-3520846057716019780792370966604359203932850489191150656140230000160679656459018897470492170774254578"),
                            Int("-5914946685253852635119206148331120821208678937542938933391917255994107447341046591131911378307698637"),
                            Int("20825616718376465923392541522680103771562197750007257629262419020121379798945356671616423593685637091147782937518477268066494999809893000863216660800207535605742194377833418087000034973197852341610186")));
    CHECK(runMultiplication(Int("41958587721213417537977259183628957436179156413509"),
                            Int("20547721012592177378151684752753169003577304226081"),
                            Int("862153354577869064149120271086045693973837670563780004337038524400873278617865927104491260858528229")));
    CHECK(runMultiplication(Int("-6352924118117336128689225344856564300142226628620770169125520570406076562480682345308538434608927331"),
                            Int("-44897125377411193243336805405397198771155162269688"),
                            Int("285228030644293476839813238657368168258959677452390902027358368768366366169696517779169021252528536095311930172471302917718977638661413936345016042728")));
    CHECK(runMultiplication(Int("-2107401157288885270081346004943615599263524730652"),
                            Int("-6474424856843167630899687703797805776883171584527269530684316588960063018842313597520900345318290723"),
                            Int("13644210436091216806293469243041717846144751257491662143056451672924391353195761810285645244440738578035157747722109254440359036680324428987605341396")));
    CHECK(runMultiplication(Int("22044458814941236145500823354377173098180047876141"),
                            Int("7172232544227900614764481025172873106890343969063862284011676353911775022814643121408728055250458146"),
                            Int("158107984932413153046425515006765292333790984118806097493028503221513279757047649367429971653069079579382940844344627327479188443174242601004512494586")));
    CHECK(runMultiplication(Int("45769308380678807989597635484538565624207183505432"),
                            Int("-87870921858572687059730487422094247888820771767004"),
                            Int("-4021791320239543544492948807584683357357128859463421633564270189469507883625083544769959505472365728")));
    CHECK(runMultiplication(Int("-22062738319995653104340077321373564898670704597637"),
                            Int("-5959932762735825247903419739853180892265225771427880538661411705087261655771627182872434945332078329"),
                            Int("131492436949009252527882511015194144621645076315246554796222049334179792457111893442008743959884803320434370765667513985302318324008305129000912308573")));
}

TEST(division) {
    CHECK_THROW(runDivideByInt(Int("1"), 0, Int("1")), divide_by_zero_error);
    CHECK_THROW(runDivision(Int("1"), Int("0"), Int("1")), divide_by_zero_error);
    CHECK(runDivideByInt(Int("999999999999999999"),    9, Int("111111111111111111")));
    CHECK(runDivideByInt(Int("999999999999999998"),    9, Int("111111111111111110")));
    CHECK(runDivideByInt(Int("999999999999999999"), 3456, Int("289351851851851")));
    CHECK(runDivideByInt(Int("123456789123456789"), 3456, Int("35722450556555")));

    for (int i = -50; i < 50; ++i)
        for (int j = 50; j < 50; ++j)
            CHECK(runDivision(Int(i), Int(j), Int(i / j)));

    assert(sizeof(int64_t) == 8);
    for (int64_t i = -100000000000000; i < 100000000000000; i += 7777777777777)
        for (int64_t j = -100000000000000; j < 100000000000000; j += 9999999999999)
            CHECK(runDivision(Int(i), Int(j), Int(i / j)));

    CHECK(runDivision(Int("152415787806666675432666675280250887626"),
                      Int("123456789123456789123456789"),
                      Int("1234567891234")));
    CHECK(runDivision(Int("892688549133587473460685901957574028827081901509624"),
                      Int("683073114412696749374388399771506007302687338290210"),
                      Int("1")));
    CHECK(runDivision(Int("159069612686013579774547350977484902995571365005296"),
                      Int("41760137312781808541142105296096759875884125968758"),
                      Int("3")));
    CHECK(runDivision(Int("765957773798222602137633586743641814684603288089155"),
                      Int("537204038351133654713387408478559543656727188063263"),
                      Int("1")));
    CHECK(runDivision(Int("852934782428991665597506037335469617630772170224373"),
                      Int("73407779909874116411243581816067470238234948055227"),
                      Int("11")));
    CHECK(runDivision(Int("741876764515954241240946435473141754834413033246489"),
                      Int("741460238259148699935829316897511175519334425294893"),
                      Int("1")));
    CHECK(runDivision(Int("81625165475312641478534468455447959293609303881517"),
                      Int("70369030994212948397524596189686127723792293577305"),
                      Int("1")));
    CHECK(runDivision(Int("175185146111993348257111610634624552199145346790096"),
                      Int("121768966843114993816061624840891743370298576756047"),
                      Int("1")));
    CHECK(runDivision(Int("222035070643781191984560529847551282880761790117288"),
                      Int("138191640963284577437992934237241943627612258339043"),
                      Int("1")));
    CHECK(runDivision(Int("101538859517268624125905266085838986174465901039616"),
                      Int("25127266418107022571095918433577900923526979733203"),
                      Int("4")));
    CHECK(runDivision(Int("201442870850044501307677881987079142194660370291195"),
                      Int("78966195523081964852290294453254176342721118616824"),
                      Int("2")));
    CHECK(runDivision(Int("533059976049716808504549883979914024197995755567729689550307275714792474182651938873077948475203288"),
                      Int("303718584091821029036369600969194631679146172555119245164428319308960310662765365049462869636072344"),
                      Int("1")));
    CHECK(runDivision(Int("5072149510021600930900670099073870520284549271965767249028278226666407931755014383654194259795344942"),
                      Int("4842950300876913349957310449204912983564289665334588559614131281004299538706853767965055557452461076"),
                      Int("1")));
    CHECK(runDivision(Int("256862733196736311839291502883583426485244438160069803660882219837085076044602100720002236456718366"),
                      Int("78510132503588467446062469900258532520974132798489205323522259369589349580829594692606407856244572"),
                      Int("3")));
    CHECK(runDivision(Int("8509715751739189345940057132893197137114300157154545497302741521385016181999985352121484840066372259"),
                      Int("6834229923667361198237865388919718323830051876177900097948623627017871728003731275374269737141496185"),
                      Int("1")));
    CHECK(runDivision(Int("8227457086537367698872866551143410757697114798114413208538431002925553535106391062918023980735069506"),
                      Int("3936890160374434698784572270365307004533769198190074051333540631388431076764122533514855300432189562"),
                      Int("2")));
    CHECK(runDivision(Int("8035576056183626747328175613361290214648309414434182935897937919811101951502709708436329132076984050"),
                      Int("5528243118724562595220559849537134060148555654473338900382604274753869722692622516837107488160600828"),
                      Int("1")));
    CHECK(runDivision(Int("3462599762038353730077506707348725537643453509844855166511983987776615772790420360422136019962079446"),
                      Int("225588177339980924843984773920478653567768918893575006670288796963900525703773609930551861456991708"),
                      Int("15")));
    CHECK(runDivision(Int("8476768780864785198957413133577658989645488187817256344965704706498162115261331209267385214958599035"),
                      Int("7178189160945940611228454316035852409873019128270312249754666843719430291648412096962005214684573609"),
                      Int("1")));
    CHECK(runDivision(Int("7914179271216759099142154592824801793616678904275401083299818579122832850748680923383564985593645340"),
                      Int("281855056185483744749309585484849624277864167952729918028159290903200470801350764774963042311177622"),
                      Int("28")));
    CHECK(runDivision(Int("8808104923780124135442777433331471385723023852621636211386148093876899804113918964444191536521344232"),
                      Int("2783984158782532176296727673303491009778550891540980045872500350799312556519289564957451716237619240"),
                      Int("3")));
    CHECK(runDivision(Int("5268800346873908079818747448188263027263123994293532348316947406871768216143080114132138343593198089"),
                      Int("71968908090714669226018720531074600357266310065610"),
                      Int("73209396761067180127315144609215007287390617834552")));
    CHECK(runDivision(Int("1856718570339540668014659224098447979947318313331384545230819692159514491047080636082089769225831002"),
                      Int("67017518095323335054750792332771900863944432073121"),
                      Int("27704973611505728782168112047781586203356824300129")));
    CHECK(runDivision(Int("5578775155583910556789632632567914486979552517536833656235998909566063132775095267860676135344540584"),
                      Int("55249385120119051512839355412926580611761199024397"),
                      Int("100974429732655989387993187988118888889508015667131")));
    CHECK(runDivision(Int("6845194883258113493452309978714414652597486784518818324542044495873386915157210051467381388170308291"),
                      Int("18930907750842381050931919735210534795683678777512"),
                      Int("361588306981925806247309070941296410377560069306528")));
    CHECK(runDivision(Int("2400354482977426571186834981636325299242678978564280147598192927862937835808562675562426884291199706"),
                      Int("33183366204607748190558087125052898636552738322043"),
                      Int("72336075495683742603832791123827976779911553440967")));
    CHECK(runDivision(Int("6352507856685042081274788792655540414173112682116453406032986963773326935554353878455375777139244047"),
                      Int("29382341297429731725822133018073779465213992221110"),
                      Int("216201554273033309195503442027347146032681201782472")));
    CHECK(runDivision(Int("6001830797119987125319729965476282723612673142369307176946122725646172541147013597492175585009441798"),
                      Int("65424780663177711278567478205488057581051550901936"),
                      Int("91736353355448535952454649449816142912952463886975")));
    CHECK(runDivision(Int("2385228403790041467309336009528207613843517164604453904564491978640126621994745022807460820153799742"),
                      Int("3210095194840235283272195729868785589230401631724"),
                      Int("743039772659686812217979397695153170419603420614643")));
    CHECK(runDivision(Int("5604171891744247377474037254252372304727852796090851388031201568431407589141076955967515274004488308"),
                      Int("52203235109970899258968934010465471834542015156012"),
                      Int("107352961553791554437001100367746185213398207299188")));
    CHECK(runDivision(Int("9780821028932757939048552319771460850848521692551930372027930462007407881465295658853752073320093636"),
                      Int("33962979486201041009242120536803632485469463248832"),
                      Int("287984775685144115482873428957092491791888148695170")));
    CHECK(runDivision(Int("4375105371653981386719912458170096870580469987946477757556499893731674296287432436680748504800464459"),
                      Int("30659888468932008286039346403242494385010069883828"),
                      Int("142698019795059668377835736735948126395586641835620")));
    CHECK(runDivision(Int("-4375105371653981386719912458170096870580469987946477757556499893731674296287432436680748504800464459"),
                      Int("30659888468932008286039346403242494385010069883828"),
                      Int("-142698019795059668377835736735948126395586641835620")));
    CHECK(runDivision(Int("4375105371653981386719912458170096870580469987946477757556499893731674296287432436680748504800464459"),
                      Int("-30659888468932008286039346403242494385010069883828"),
                      Int("-142698019795059668377835736735948126395586641835620")));
    CHECK(runDivision(Int("-4375105371653981386719912458170096870580469987946477757556499893731674296287432436680748504800464459"),
                      Int("-30659888468932008286039346403242494385010069883828"),
                      Int("142698019795059668377835736735948126395586641835620")));
    CHECK(runDivision(Int("5048319869826750734378455832447047781351144764273181757801505590208457948630018831874196994004381449"),
                      Int("8687682638423793469516490816971947483426640928277"),
                      Int("581089351434074434019987504680948665887680265128851")));
    CHECK(runDivision(Int("-5048319869826750734378455832447047781351144764273181757801505590208457948630018831874196994004381449"),
                      Int("8687682638423793469516490816971947483426640928277"),
                      Int("-581089351434074434019987504680948665887680265128851")));
    CHECK(runDivision(Int("5048319869826750734378455832447047781351144764273181757801505590208457948630018831874196994004381449"),
                      Int("-8687682638423793469516490816971947483426640928277"),
                      Int("-581089351434074434019987504680948665887680265128851")));
    CHECK(runDivision(Int("-5048319869826750734378455832447047781351144764273181757801505590208457948630018831874196994004381449"),
                      Int("-8687682638423793469516490816971947483426640928277"),
                      Int("581089351434074434019987504680948665887680265128851")));
    CHECK(runDivision(Int("7787284917477063688397732378872047986606328036425225356969343761868534104268141034572126532815594304"),
                      Int("76403468436865991945090345059466389538253495002336"),
                      Int("101923185907612072984238499907662990966466272500851")));
    CHECK(runDivision(Int("-7787284917477063688397732378872047986606328036425225356969343761868534104268141034572126532815594304"),
                      Int("76403468436865991945090345059466389538253495002336"),
                      Int("-101923185907612072984238499907662990966466272500851")));
    CHECK(runDivision(Int("7787284917477063688397732378872047986606328036425225356969343761868534104268141034572126532815594304"),
                      Int("-76403468436865991945090345059466389538253495002336"),
                      Int("-101923185907612072984238499907662990966466272500851")));
    CHECK(runDivision(Int("-7787284917477063688397732378872047986606328036425225356969343761868534104268141034572126532815594304"),
                      Int("-76403468436865991945090345059466389538253495002336"),
                      Int("101923185907612072984238499907662990966466272500851")));
    CHECK(runDivision(Int("3563279195617349670092060887886682309093542345059254737086851816803913257636748665736405736093390757"),
                      Int("99912884971696237301856481335342189829935091254402"),
                      Int("35663860538375717162705612378888647558535932468745")));
    CHECK(runDivision(Int("-3563279195617349670092060887886682309093542345059254737086851816803913257636748665736405736093390757"),
                      Int("99912884971696237301856481335342189829935091254402"),
                      Int("-35663860538375717162705612378888647558535932468745")));
    CHECK(runDivision(Int("3563279195617349670092060887886682309093542345059254737086851816803913257636748665736405736093390757"),
                      Int("-99912884971696237301856481335342189829935091254402"),
                      Int("-35663860538375717162705612378888647558535932468745")));
    CHECK(runDivision(Int("-3563279195617349670092060887886682309093542345059254737086851816803913257636748665736405736093390757"),
                      Int("-99912884971696237301856481335342189829935091254402"),
                      Int("35663860538375717162705612378888647558535932468745")));
    CHECK(runDivision(Int("8175531939911896644418378796299632572087306321375356920018889704892514058629157286800304342399311919"),
                      Int("92348952391545222255989121411116812355627827988565"),
                      Int("88528691752223786538064506473719414467805022516684")));
    CHECK(runDivision(Int("-8175531939911896644418378796299632572087306321375356920018889704892514058629157286800304342399311919"),
                      Int("92348952391545222255989121411116812355627827988565"),
                      Int("-88528691752223786538064506473719414467805022516684")));
    CHECK(runDivision(Int("8175531939911896644418378796299632572087306321375356920018889704892514058629157286800304342399311919"),
                      Int("-92348952391545222255989121411116812355627827988565"),
                      Int("-88528691752223786538064506473719414467805022516684")));
    CHECK(runDivision(Int("-8175531939911896644418378796299632572087306321375356920018889704892514058629157286800304342399311919"),
                      Int("-92348952391545222255989121411116812355627827988565"),
                      Int("88528691752223786538064506473719414467805022516684")));
    CHECK(runDivision(Int("7642027738794016737876512389246877930889098141986993524240616337472134487997231025054549432057955672"),
                      Int("85233228759360770615609137502923193180942249246970"),
                      Int("89660192979075994912936266305071643520521790400730")));
    CHECK(runDivision(Int("-7642027738794016737876512389246877930889098141986993524240616337472134487997231025054549432057955672"),
                      Int("85233228759360770615609137502923193180942249246970"),
                      Int("-89660192979075994912936266305071643520521790400730")));
    CHECK(runDivision(Int("7642027738794016737876512389246877930889098141986993524240616337472134487997231025054549432057955672"),
                      Int("-85233228759360770615609137502923193180942249246970"),
                      Int("-89660192979075994912936266305071643520521790400730")));
    CHECK(runDivision(Int("-7642027738794016737876512389246877930889098141986993524240616337472134487997231025054549432057955672"),
                      Int("-85233228759360770615609137502923193180942249246970"),
                      Int("89660192979075994912936266305071643520521790400730")));
    CHECK(runDivision(Int("8247763238089273547361905144605704475710105588478623999260213893838700204692131229672943892608030844"),
                      Int("51830110525585994037023837475497560113777123339955"),
                      Int("159130728344053128747308027314124243433615682779084")));
    CHECK(runDivision(Int("-8247763238089273547361905144605704475710105588478623999260213893838700204692131229672943892608030844"),
                      Int("51830110525585994037023837475497560113777123339955"),
                      Int("-159130728344053128747308027314124243433615682779084")));
    CHECK(runDivision(Int("8247763238089273547361905144605704475710105588478623999260213893838700204692131229672943892608030844"),
                      Int("-51830110525585994037023837475497560113777123339955"),
                      Int("-159130728344053128747308027314124243433615682779084")));
    CHECK(runDivision(Int("-8247763238089273547361905144605704475710105588478623999260213893838700204692131229672943892608030844"),
                      Int("-51830110525585994037023837475497560113777123339955"),
                      Int("159130728344053128747308027314124243433615682779084")));
    CHECK(runDivision(Int("7248356142697495711903968371372298448777693068083996798558973854343178486009439997530238115808804246"),
                      Int("64140276029031871734930414121824981546385516776913"),
                      Int("113007872610599082068741019625487265854916901100586")));
    CHECK(runDivision(Int("-7248356142697495711903968371372298448777693068083996798558973854343178486009439997530238115808804246"),
                      Int("64140276029031871734930414121824981546385516776913"),
                      Int("-113007872610599082068741019625487265854916901100586")));
    CHECK(runDivision(Int("7248356142697495711903968371372298448777693068083996798558973854343178486009439997530238115808804246"),
                      Int("-64140276029031871734930414121824981546385516776913"),
                      Int("-113007872610599082068741019625487265854916901100586")));
    CHECK(runDivision(Int("-7248356142697495711903968371372298448777693068083996798558973854343178486009439997530238115808804246"),
                      Int("-64140276029031871734930414121824981546385516776913"),
                      Int("113007872610599082068741019625487265854916901100586")));
    CHECK(runDivision(Int("5006917962817744191651111378501160484692590016152190230470577015373326559412993706939836999862783527"),
                      Int("92359147423877222417816701791544399519609936632226"),
                      Int("54211392184455426478778637245471270208443062429585")));
    CHECK(runDivision(Int("-5006917962817744191651111378501160484692590016152190230470577015373326559412993706939836999862783527"),
                      Int("92359147423877222417816701791544399519609936632226"),
                      Int("-54211392184455426478778637245471270208443062429585")));
    CHECK(runDivision(Int("5006917962817744191651111378501160484692590016152190230470577015373326559412993706939836999862783527"),
                      Int("-92359147423877222417816701791544399519609936632226"),
                      Int("-54211392184455426478778637245471270208443062429585")));
    CHECK(runDivision(Int("-5006917962817744191651111378501160484692590016152190230470577015373326559412993706939836999862783527"),
                      Int("-92359147423877222417816701791544399519609936632226"),
                      Int("54211392184455426478778637245471270208443062429585")));
    CHECK(runDivision(Int("8732037132499916294995003396470923085126622228271376354946729964112965633390766613994812525049868998"),
                      Int("71941543477960576971115492453135303501499130618954"),
                      Int("121376838893858202990675431550151709793337267900456")));
    CHECK(runDivision(Int("-8732037132499916294995003396470923085126622228271376354946729964112965633390766613994812525049868998"),
                      Int("71941543477960576971115492453135303501499130618954"),
                      Int("-121376838893858202990675431550151709793337267900456")));
    CHECK(runDivision(Int("8732037132499916294995003396470923085126622228271376354946729964112965633390766613994812525049868998"),
                      Int("-71941543477960576971115492453135303501499130618954"),
                      Int("-121376838893858202990675431550151709793337267900456")));
    CHECK(runDivision(Int("-8732037132499916294995003396470923085126622228271376354946729964112965633390766613994812525049868998"),
                      Int("-71941543477960576971115492453135303501499130618954"),
                      Int("121376838893858202990675431550151709793337267900456")));

    // check /= is safe to use on a single instance
    Int x("111111111222222222");
    x /= x;
    CHECK(testOutput(x, "1"));
    x = Int("-111111111222222222");
    x /= x;
    CHECK(testOutput(x, "1"));

}

TEST(modulus) {
    CHECK(runModulus(Int("0"), Int("3"), Int(0)));

    CHECK(runModulus(Int("5"),  Int( "3"), Int(2)));
    CHECK(runModulus(Int("5"),  Int("-3"), Int(-1)));
    CHECK(runModulus(Int("-5"), Int( "3"), Int(1)));
    CHECK(runModulus(Int("-5"), Int("-3"), Int(-2)));

    CHECK(runModulus(Int("-5"), Int("-5"), Int(0)));
    CHECK(runModulus(Int( "5"), Int("-5"), Int(0)));
    CHECK(runModulus(Int("-5"), Int( "5"), Int(0)));
    CHECK(runModulus(Int( "5"), Int( "5"), Int(0)));

    CHECK(runModulus(Int( "987654321"), Int( "417"), Int(246)));
    CHECK(runModulus(Int("-987654321"), Int( "417"), Int(171)));
    CHECK(runModulus(Int( "987654321"), Int("-417"), Int(-171)));
    CHECK(runModulus(Int("-987654321"), Int("-417"), Int(-246)));

    CHECK_THROW(runModulus(Int("1234"), Int("0"), Int(0)), divide_by_zero_error);

    // check /= is safe to use on a single instance
    Int x("111111111222222222");
    x %= x;
    CHECK(testOutput(x, "0"));
    x = Int("-111111111222222222");
    x %= x;
    CHECK(testOutput(x, "0"));

    CHECK(runModulus(Int("570401956580120360777015577391676744559280693141797786119306070944787417435180094003090124698038033"),
                     Int("84991312281510074036013989474209118798404573512711"),
                     Int("34866709711359262278470001803549989127138561794359")));
    CHECK(runModulus(Int("2253609833810607247114425818442753590690556891902473846901194639140277681230447597844666396052682583"),
                     Int("90843777999971773326249322942501772193271666471153"),
                     Int("58618912692410678659531040271152339531181990724017")));
    CHECK(runModulus(Int("-9356268829768016010172835243338887144508477233788949827561380310818425057081356129644623696998737409"),
                     Int("80505731752392216575189266040932292701271566499214"),
                     Int("55965798259495433324932230759252587177448006192781")));
    CHECK(runModulus(Int("8899709604542087356368934530359901969706645998212268216892774760946837901654212492817587216802061632"),
                     Int("74198260422247442943553003617331780466821445499820"),
                     Int("14717279702289283557498005315778216852107133508452")));
    CHECK(runModulus(Int("2381137163307800925955224436975097309589601648354178310861379222933766175673226490512878907834260578"),
                     Int("-19340249741851678279229487055487618861320135080260"),
                     Int("-12574718878808100046630184884011825140487800286842")));
    CHECK(runModulus(Int("2089274586252646363143287639136218276093735813007154927877851442148038265075379041324334777097938374"),
                     Int("-76473811825932962824259776249350449186534465450231"),
                     Int("-55747895806456093224287164509012957655892008387779")));
    CHECK(runModulus(Int("-238874125948408056382085439523963486129586186252040433201335304733192413670323673325751453952850576"),
                     Int("26801775952689593654317198815093848214924445301889"),
                     Int("26039253209390713516280569686713136184742040631617")));
    CHECK(runModulus(Int("5036313710477217393149224386947946769338968654461562525224047415846943039155925416452260812347936733"),
                     Int("35691963930422169523018598542761769118614365061364"),
                     Int("4389084268493036333551261226246362829437049862149")));
    CHECK(runModulus(Int("1727073714527151381214406804456988838749918622188082262142072920695566330504814957730975958204421155"),
                     Int("-68060783250572826656972342111883238918458047917622"),
                     Int("-19264307168413615782479633688522354098691235776219")));
    CHECK(runModulus(Int("7198302433883898671327555641309051658538441610518862455922303787796343129520395879733593102112944478"),
                     Int("-25271956389930490041009813891350347343291210840876"),
                     Int("-22048879358517842677823621365823565204278962171850")));
    CHECK(runModulus(Int("281148440327403732590390854073018453494196338867917016725969049881954043192954017093180156602132682"),
                     Int("-33128543500123425714132256438766179302083778661837"),
                     Int("-25135889516689406828493439212509700873165449418230")));
    CHECK(runModulus(Int("-1176452021085174314543813826503448336922699641099385847505276555165288243332611331289376818934592232"),
                     Int("-56666901675893704676405961742602771659813942683294"),
                     Int("-17174656674145934662400717305471006007086278150868")));
    CHECK(runModulus(Int("-4846913066395963633385349365722813829586228654113613025420763833062012366415894749222020975592442915"),
                     Int("60154089283858081325352124749511225237378661592728"),
                     Int("31955831675119825013657894126697981787768567793749")));
    CHECK(runModulus(Int("1426941022967688491335127351898915603024702706966700931882497901648601279978607108048333330172186448"),
                     Int("44290047161695564035028022778864445689623403057886"),
                     Int("25787806938861478770281818195458814470883624392030")));
    CHECK(runModulus(Int("1372778961307217257961984307723300389825021006895786687847208357877707698377718646155518928423668204"),
                     Int("-24384962577280857585537619827615679112202079394753"),
                     Int("-15630971108159720758944020039789508075844257423195")));
    CHECK(runModulus(Int("5751884375254005229226444375045972048503496310481879609665621519654853139091361672313139146509620430"),
                     Int("-60823495420835514352247500554072257929238406440487"),
                     Int("-57367674742432786493554841729411931132106302028217")));
    CHECK(runModulus(Int("2172717180424691788775875937560361326454013445604933257552624121266190053900950227425165728869216424"),
                     Int("9539033626432703765964917915760309349436658508685"),
                     Int("3365149443288055536323703087813269004419245038484")));
    CHECK(runModulus(Int("-4309097921208262092273629270608676643203179234265797073440737776662492024965010600843120656394613804"),
                     Int("-73911443955577583868697767522218525814603410638128"),
                     Int("-12068008436373706229530200752373577478421612741788")));
    CHECK(runModulus(Int("5171507397226173047241199197472560516365689623051251408266019529874220233519762622317040638819270933"),
                     Int("69148999053488200544279913478732589560489870922124"),
                     Int("15005735592633213777770890356188023039036332138325")));
    CHECK(runModulus(Int("4220166919790870227851609992124955529366828396623482803074416148886109561887436597656589237314843997"),
                     Int("23786968737542539642905041481979972065276615710347"),
                     Int("19493580213365553057812881012054202760537912221436")));
}

// negative exponents are handled elsewhere (than Int), since the result must be a fraction or decimal
TEST(exponentiation) {
    // check (arg0 ^ arg1) == arg2
    CHECK(runExponentiation(Int(2), Int(0), Int(1)));
    CHECK(runExponentiation(Int(2), Int(1), Int(2)));
    CHECK(runExponentiation(Int(2), Int(2), Int(4)));
    CHECK(runExponentiation(Int(2), Int(3), Int(8)));
    CHECK(runExponentiation(Int(-2), Int(0), Int(1)));
    CHECK(runExponentiation(Int(-2), Int(1), Int(-2)));
    CHECK(runExponentiation(Int(-2), Int(2), Int(4)));
    CHECK(runExponentiation(Int(-2), Int(3), Int(-8)));

    CHECK(runExponentiation(Int(2), Int(8), Int(256)));
    CHECK(runExponentiation(Int(2), Int(9), Int(512)));

    CHECK(runExponentiation(Int(987), Int(20), Int("769738223842181441453473918342107866070875104572033095898801")));

    // check ^= safe to use with single instances
    Int x("123");
    x ^= x;
    CHECK(testOutput(x, "11437436793461719009988029522806627674621807845185022977588797505"
                        "23695047856668964466065683652015421696499747277306288423453431965"
                        "81134895919942820874449837212099476648958359023796078549041949007"
                        "807220625356526926729664064846685758382803707100766740220839267"));

    CHECK(runExponentiation(Int("-41"),
                            Int("188"),
                            Int("15972211902042981777713843786543218026341782031829321790016285947622678752030466"
                                "28894699371568784766393676418789614112341404800879487570781165445790436616892779"
                                "94942990249095185602017598234992317719482714808462249648314289852927265791296204"
                                "0945283385354041733402580138202169249833986457905625816708836321")));
    CHECK(runExponentiation(Int("-328"),
                            Int("3"),
                            Int("-35287552")));
    CHECK(runExponentiation(Int("482"),
                            Int("149"),
                            Int("59430406058686343219630696634586688325889692121116135739453080490297071388931793"
                                "49523527320330656563264923772256144016668415104436149084722126587081987740932389"
                                "21657982528373685297975821329068033079839390826082238503370797268943650988122933"
                                "84545346980052267996577186697187980331142704091262940263814210456092113544663243"
                                "28573733300030499227583257980553723197270229803520715248307419568358292698693632")));
    CHECK(runExponentiation(Int("-284"),
                            Int("132"),
                            Int("68868541599520408853104569098897712269219982502817746431418833514979618463489351"
                                "18989895859189001471959605880464986534446460555769676026426302755935737755799666"
                                "30376865096865670193440623208962422650305475936024509614659038089164321652683246"
                                "12258860897122325363177794445928397725827881991478639581183664763600629125523020"
                                "1856")));
    CHECK(runExponentiation(Int("-258"),
                            Int("452"),
                            Int("11274754530887837392209196588340872899609791363697689539049006653209732544874920"
                                "61670108844356904551181453049983490154748943715690913534774692988631290965036450"
                                "76530521848946240113446380559045328525149493813415118310775502505489273130759342"
                                "85663620321130920944370457671776134395076953569447901826873068747369319335212197"
                                "11495363049390667507959125889082238129784868097774994660048131560146518940061021"
                                "81248645341602223158636340885115388011467617517797449975169963441432129083765805"
                                "93851506031963489046404916594768744419541636839372534739855840590427574422891754"
                                "44088203457889435040356684640964563607155647855813405784666164880508696687734605"
                                "33329708433693820816601955576890004403673829397165940967138522774663429594111601"
                                "50120541284878858732597161647033839312350076530399798712843796919485441155875719"
                                "64979581237589531022390187779558714088101943349938110329650768010905313401142276"
                                "78431769704583351400997808406008883201014122695671013468763253637584895606807243"
                                "61961512188232309147300107666066068766580250315882264852283504730118623999594097"
                                "425108135246149739047208502048516826184182122151936")));
    CHECK(runExponentiation(Int("125"),
                            Int("193"),
                            Int("50539682649402436332882494167974075410541549023603415514198572576985398176336021"
                                "55264200613970135123553963207198113818126027329602832263453619107932828308370562"
                                "98407990091027458545729687520698285730952388989706912596199080391319856692535228"
                                "62950122532775286063765192224215008011014117207408086912888747960045622075051016"
                                "58934297854126716355856789951172068631868707425103259822662948863580822944641113"
                                "28125")));
    CHECK(runExponentiation(Int("379"),
                            Int("433"),
                            Int("35544950697278832605855144985292207001758051998573839301827672513929725162765393"
                                "35104572578195680721679849501102335201906127810815632150256391452016580553868357"
                                "92048251967586380692651429336835943766370512179118520868025297714471985402718886"
                                "77321358880318759516905318696000207171145972603736783472359387614911030216883941"
                                "38728384750133595589064432432681423750769285974099355179618514607547991842304267"
                                "10435130097557834890927960502168973647830992091108186421073502073981284468848640"
                                "97080476468096349356709284922005945841217381257320064627770898993120669220798077"
                                "21349242921546799754035732221192431393161724634227556127461943325080215879816284"
                                "83101884134379046246307424329707783714017219470071104601453019913320007980284645"
                                "45948831893550575912233100431225962322709398705628386323028449022916802343975671"
                                "57624043180971154651320270912813132432401113187322538970016849267726720989500367"
                                "46941603368548162852566599475889192444500223341141480602525960664125268150633215"
                                "51710465961901099013845619888383750018566932773586277257709155964179099166930600"
                                "23613025031231842747087547878300562863547092880385090315519091131919906753339")));
    CHECK(runExponentiation(Int("386"),
                            Int("411"),
                            Int("12228754323835659576465649481805733180358052094781094125831276285335801812349716"
                                "23226201442858321054940992607167786628565392994460968464160625374051388147141992"
                                "87580994009132980629694512399690439532361708051823003409145904083472255636740369"
                                "57800951206224856645237240248075974078302136179768064602761431720940611985965427"
                                "69914558873096227220451926709200677671695810505408272570725182122812089841563603"
                                "23240840476471364826205662505919153505775462131044846477134198076499401500642638"
                                "38896385512036002290227398799564427848778595390513959701301748569130675845184523"
                                "18825669338274346382117808540351291836188056541207319278940429446953032605329041"
                                "38245745059426336912204781259684546753890408859832869132960811694131128269820847"
                                "61210371007607561551005985450286762602232235279535726118246998199672336603542497"
                                "66906629562082189957347321935859437790605360406116984743741761656434213787468045"
                                "43198460154706365319473011815880582596474387232343262585402970212456153280654082"
                                "81047785647645556235580474467231067239983251314734083445522221739649451641372877"
                                "286320020820996952948736")));
}

TEST(timesPowerTen) {
    CHECK(runTimesPowerTen(Int(2),  0, Int("2")));
    CHECK(runTimesPowerTen(Int(2),  1, Int("20")));
    CHECK(runTimesPowerTen(Int(2),  2, Int("200")));
    CHECK(runTimesPowerTen(Int(2),  3, Int("2000")));
    CHECK(runTimesPowerTen(Int(2),  4, Int("20000")));
    CHECK(runTimesPowerTen(Int(2),  5, Int("200000")));
    CHECK(runTimesPowerTen(Int(2),  6, Int("2000000")));
    CHECK(runTimesPowerTen(Int(2),  7, Int("20000000")));
    CHECK(runTimesPowerTen(Int(2),  8, Int("200000000")));
    CHECK(runTimesPowerTen(Int(2),  9, Int("2000000000")));
    CHECK(runTimesPowerTen(Int(2), 10, Int("20000000000")));
    CHECK(runTimesPowerTen(Int(2), 11, Int("200000000000")));
    CHECK(runTimesPowerTen(Int(2), 12, Int("2000000000000")));
    CHECK(runTimesPowerTen(Int(2), 13, Int("20000000000000")));
    CHECK(runTimesPowerTen(Int(2), 14, Int("200000000000000")));
    CHECK(runTimesPowerTen(Int(2), 15, Int("2000000000000000")));
    CHECK(runTimesPowerTen(Int(2), 16, Int("20000000000000000")));
    CHECK(runTimesPowerTen(Int(2), 17, Int("200000000000000000")));
    CHECK(runTimesPowerTen(Int(2), 18, Int("2000000000000000000")));
    CHECK(runTimesPowerTen(Int(2), 19, Int("20000000000000000000")));

    CHECK(runTimesPowerTen(Int("2"),                     0,  Int(2)));
    CHECK(runTimesPowerTen(Int("20"),                   -1,  Int(2)));
    CHECK(runTimesPowerTen(Int("200"),                  -2,  Int(2)));
    CHECK(runTimesPowerTen(Int("2000"),                 -3,  Int(2)));
    CHECK(runTimesPowerTen(Int("20000"),                -4,  Int(2)));
    CHECK(runTimesPowerTen(Int("200000"),               -5,  Int(2)));
    CHECK(runTimesPowerTen(Int("2000000"),              -6,  Int(2)));
    CHECK(runTimesPowerTen(Int("20000000"),             -7,  Int(2)));
    CHECK(runTimesPowerTen(Int("200000000"),            -8,  Int(2)));
    CHECK(runTimesPowerTen(Int("2000000000"),           -9,  Int(2)));
    CHECK(runTimesPowerTen(Int("20000000000"),          -10, Int(2)));
    CHECK(runTimesPowerTen(Int("200000000000"),         -11, Int(2)));
    CHECK(runTimesPowerTen(Int("2000000000000"),        -12, Int(2)));
    CHECK(runTimesPowerTen(Int("20000000000000"),       -13, Int(2)));
    CHECK(runTimesPowerTen(Int("200000000000000"),      -14, Int(2)));
    CHECK(runTimesPowerTen(Int("2000000000000000"),     -15, Int(2)));
    CHECK(runTimesPowerTen(Int("20000000000000000"),    -16, Int(2)));
    CHECK(runTimesPowerTen(Int("200000000000000000"),   -17, Int(2)));
    CHECK(runTimesPowerTen(Int("2000000000000000000"),  -18, Int(2)));
    CHECK(runTimesPowerTen(Int("20000000000000000000"), -19, Int(2)));

    CHECK(runTimesPowerTen(Int("2"),                    -1,  Int(0)));
    CHECK(runTimesPowerTen(Int("20"),                   -2,  Int(0)));
    CHECK(runTimesPowerTen(Int("200"),                  -3,  Int(0)));
    CHECK(runTimesPowerTen(Int("2000"),                 -4,  Int(0)));
    CHECK(runTimesPowerTen(Int("20000"),                -5,  Int(0)));
    CHECK(runTimesPowerTen(Int("2"),                    -11, Int(0)));
    CHECK(runTimesPowerTen(Int("20"),                   -12, Int(0)));
    CHECK(runTimesPowerTen(Int("200"),                  -13, Int(0)));
    CHECK(runTimesPowerTen(Int("2000"),                 -14, Int(0)));
    CHECK(runTimesPowerTen(Int("20000"),                -15, Int(0)));
    CHECK(runTimesPowerTen(Int("20000000000"),          -11, Int(0)));
    CHECK(runTimesPowerTen(Int("200000000000"),         -12, Int(0)));
    CHECK(runTimesPowerTen(Int("2000000000000"),        -13, Int(0)));
    CHECK(runTimesPowerTen(Int("20000000000000"),       -14, Int(0)));
    CHECK(runTimesPowerTen(Int("200000000000000"),      -15, Int(0)));
    CHECK(runTimesPowerTen(Int("20000000000"),          -21, Int(0)));
    CHECK(runTimesPowerTen(Int("200000000000"),         -22, Int(0)));
    CHECK(runTimesPowerTen(Int("2000000000000"),        -23, Int(0)));
    CHECK(runTimesPowerTen(Int("20000000000000"),       -24, Int(0)));
    CHECK(runTimesPowerTen(Int("200000000000000"),      -25, Int(0)));
}

/* Note: The Int::read(istream&) method is already tested since 
 * Int(string&) and the operator>> overload both call Int::read(istream&).
 * This just checks some functionality concerning the operator>> overload.
 */ 
TEST(inStream) {
    Int x;

    // check operator>> is usable repeatedly on the same instance
    std::vector<std::string> testStrings;
    testStrings.push_back("0");
    testStrings.push_back("5");
    testStrings.push_back("-5");
    testStrings.push_back("1234");
    testStrings.push_back("-1234");
    testStrings.push_back("1123456789");
    testStrings.push_back("-1123456789");
    testStrings.push_back("123456789123456789");
    testStrings.push_back("-123456789123456789");

    std::stringstream ss;
    for (size_t i = 0; i < testStrings.size(); ++i) {
        ss.str(testStrings[i]);
        ss.clear();
        CHECK(bool(ss >> x));
        CHECK(testOutput(x, testStrings[i]));
    }

    // check that the fail bit is set on unparseable content
    std::vector<std::string> badStrings;
    badStrings.push_back("-");
    badStrings.push_back("a");
    badStrings.push_back("a1234");

    for (size_t i = 0; i < badStrings.size(); ++i) {
        ss.str(badStrings[i]);
        ss.clear();
        ss >> x;
        CHECK(ss.fail());
    }
}

} // namespace IntTest
